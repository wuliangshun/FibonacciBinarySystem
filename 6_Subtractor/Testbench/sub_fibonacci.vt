
module sub_fibonacci_vlg_tst();
reg clk;
reg en_sub;
reg [31:0] input_i;
reg [31:0] input_j;
reg rst;
                                             
wire [31:0]  out_sub;
wire sub_done;
integer i;
integer k;

sub_fibonacci i1 (
	.clk(clk),
	.en(en_sub),
	.input_i(input_i),
	.input_j(input_j),
	.out_sub(out_sub),
	.rst(rst),
	.sub_done(sub_done)
);

always
begin
	#10; 
	clk = 1'b1; 
	#10
	clk = 1'b0;
end

initial  
begin
	/*------------- Input of 144-33------------- */
        // Reset         
	@(posedge clk) rst = 0; 
	for (k = 0; k < 2; k = k + 1) @(posedge clk);
	rst = 1;
	en_sub = 1'b0; 
	for (k = 0; k < 2; k = k + 1) @(posedge clk);
	
	input_i= 13'b1000000000000;
   input_j= 8'b11111110;	
	en_sub = 1'b1; 
	for (k = 0; k < 2; k = k + 1) @(posedge clk);
	en_sub = 1'b0; 
	
	wait (sub_done == 1); 

	// Idle cycles before next input 
	for (k = 0; k < 5; k = k + 1) @(posedge clk);
	
	
	/*------------- Input of 655-616------------- */
        // Reset         
	
	input_i= 15'b101100111001010;
   input_j= 16'b1000000000100100;	
	en_sub = 1'b1; 
	for (k = 0; k < 2; k = k + 1) @(posedge clk);
	en_sub = 1'b0; 
	
	wait (sub_done == 1); 

	// Idle cycles before next input 
	for (k = 0; k < 5; k = k + 1) @(posedge clk);
	
	
	
	
	/*------------- Input of 13-12------------- */
        // Reset         
	
	
	input_i= 8'b10000000;
   input_j= 6'b111111;	
	en_sub = 1'b1; 
	for (k = 0; k < 2; k = k + 1) @(posedge clk);
	en_sub = 1'b0; 
	
	wait (sub_done == 1); 

	// Idle cycles before next input 
	for (k = 0; k < 5; k = k + 1) @(posedge clk);
	$stop;
end 
                                          
endmodule

