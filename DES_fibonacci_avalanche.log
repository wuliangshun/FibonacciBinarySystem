# ++++++++++++++++++ Test encode+encrypt  ++++++++++++++++++++
# input:  6552, binary:0001100110011000, output: 1011001001010110100011101111101011100001011010010011111001010100
# 
# ++++++++++++++++++ Test avalanche effect  (fibonacci) ++++++++++++++++++++
# input: 0001100110011001, output: 0011011110101101000110001101011000110111110000011001111010000101
# 
# xor:1000010111111011100101100010110011010110101010001010000011010001, cnt: 31
# 
# input: 0001100110011010, output: 1010100111011100110011110110010010000011110100011011011110110110
# 
# xor:0001101110001010010000011001111001100010101110001000100111100010, cnt: 28
# 
# input: 0001100110011100, output: 1000110010011000101011110011100101011010001100111001100110010101
# 
# xor:0011111011001110001000011100001110111011010110101010011111000001, cnt: 34
# 
# input: 0001100110010000, output: 1010101101100110110111000110010111101010111110101111001110001101
# 
# xor:0001100100110000010100101001111100001011100100111100110111011001, cnt: 31
# 
# input: 0001100110001000, output: 0110100011110011010111010111111100100101110101100010001111110000
# 
# xor:1101101010100101110100111000010111000100101111110001110110100100, cnt: 34
# 
# input: 0001100110111000, output: 1110000100000110001111000000100001110011001100100011011010001101
# 
# xor:0101001101010000101100101111001010010010010110110000100011011001, cnt: 29
# 
# input: 0001100111011000, output: 0010010110101111011110001100101100100001000111011101110000100100
# 
# xor:1001011111111001111101100011000111000000011101001110001001110000, cnt: 33
# 
# input: 0001100100011000, output: 0100010110111011111111100010010100000110011110100100011010011101
# 
# xor:1111011111101101011100001101111111100111000100110111100011001001, cnt: 30
# 
# input: 0001100010011000, output: 0101010101011000000101100010001010011000001100110100110101000011
# 
# xor:1110011100001110100110001101100001111001010110100111001100010111, cnt: 34
# 
# input: 0001101110011000, output: 1110110001010110011001011000101001011100000011110110100110011010
# 
# xor:0101111000000000111010110111000010111101011001100101011111001110, cnt: 34
# 
# input: 0001110110011000, output: 1010000011101011111111110011110100011100110111010010000100111000
# 
# xor:0001001010111101011100011100011111111101101101000001111101101100, cnt: 37
# 
# input: 0001000110011000, output: 0110001100011010010011010111011100000100000010111101100000011010
# 
# xor:1101000101001100110000111000110111100101011000101110011001001110, cnt: 32
# 
# input: 0000100110011000, output: 0101000101100001001011010101101010011100011101001100101100101101
# 
# xor:1110001100110111101000111010000001111101000111011111010101111001, cnt: 37
# 
# input: 0011100110011000, output: 1110011101100110000111101011001111100100010010110001100100110110
# 
# xor:0101010100110000100100000100100100000101001000100010011101100010, cnt: 32
# 
# input: 0101100110011000, output: 0111100000111101010100001010101101100111100100010011110010010000
# 
# xor:1100101001101011110111100101000110000110111110000000001011000100, cnt: 30
# 
# input: 1001100110011000, output: 1001001000010111011110101101110101011110110000010001110110111011
# 
# xor:0010000001000001111101000010011110111111101010000010001111101111, cnt: 32
# 
# ** Note: $stop    : D:/FPGA learning/ModelSim/obfus(64bit)/top_encode_encrypt_vlg_tst.v(82)
#    Time: 11285870 ns  Iteration: 0  Instance: /top_encode_encrypt_vlg_tst
run -all
# ++++++++++++++++++ Test encode+encrypt  ++++++++++++++++++++
# input: 51810, binary:1100101001100010, output: 1111001001010101101111101001110101011100111111011011001101110100
# 
# ++++++++++++++++++ Test avalanche effect  (fibonacci) ++++++++++++++++++++
# input: 1100101001100011, output: 1110111101110000010101001110001111111111001111010100000000111111
# 
# xor:0001110100100101111010100111111010100011110000001111001101001011, cnt: 34
# 
# input: 1100101001100000, output: 0111100001000110000110011111011001100011000011111111001001001001
# 
# xor:1000101000010011101001110110101100111111111100100100000100111101, cnt: 34
# 
# input: 1100101001100110, output: 1111101101111001100111000010000010100011110100111111101111101100
# 
# xor:0000100100101100001000101011110111111111001011100100100010011000, cnt: 30
# 
# input: 1100101001101010, output: 0001000100011010110100010111010101101000110010101000011111111011
# 
# xor:1110001101001111011011111110100000110100001101110011010010001111, cnt: 36
# 
# input: 1100101001110010, output: 0101010000011111110110001101010011001110100111100011100011110110
# 
# xor:1010011001001010011001100100100110010010011000111000101110000010, cnt: 27
# 
# input: 1100101001000010, output: 1011011100111001011100001111110000110101000000110000110110000011
# 
# xor:0100010101101100110011100110000101101001111111101011111011110111, cnt: 32
# 
# input: 1100101000100010, output: 0101101001011101100010000011010010100111001100001101100010011110
# 
# xor:1010100000001000001101101010100111111011110011010110101111101010, cnt: 34
# 
# input: 1100101011100010, output: 1111100001101001011101010101011100000000100010011010000110100111
# 
# xor:0000101000111100110010111100101001011100011101000001001011010011, cnt: 30
# 
# input: 1100101101100010, output: 0101111010111011100111001011111000011101111111011010111000000010
# 
# xor:1010110011101110001000100010001101000001000000000001110101110110, cnt: 26
# 
# input: 1100100001100010, output: 1111110000111100010011111000111101011000100000011000111100000010
# 
# xor:0000111001101001111100010001001000000100011111000011110001110110, cnt: 29
# 
# input: 1100111001100010, output: 0100010111010010011000000100000000110101011001110001011011001111
# 
# xor:1011011110000111110111101101110101101001100110101010010110111011, cnt: 30
# 
# input: 1100001001100010, output: 0010011101100010000011111110100111100000010011101100000010110011
# 
# xor:1101010100110111101100010111010010111100101100110111001111000111, cnt: 32
# 
# input: 1101101001100010, output: 0010111010011101001000000001010101000110000110111001001001111001
# 
# xor:1101110011001000100111101000100000011010111001100010000100001101, cnt: 28
# 
# input: 1110101001100010, output: 0000110101001000011110010000101010111000100001110011101010100101
# 
# xor:1111111100011101110001111001011111100100011110101000100111010001, cnt: 38
# 
# input: 1000101001100010, output: 0101110010111000101011001111000100000101110100011000010010110001
# 
# xor:1010111011101101000100100110110001011001001011000011011111000101, cnt: 33
# 
# input: 0100101001100010, output: 0011111011100110111000000110111000110111011101011000010011001101
# 
# xor:1100110010110011010111101111001101101011100010000011011110111001, cnt: 37
# 
# ** Note: $stop    : D:/FPGA learning/ModelSim/obfus(64bit)/top_encode_encrypt_vlg_tst.v(82)
#    Time: 7734170 ns  Iteration: 0  Instance: /top_encode_encrypt_vlg_tst
 encrypt_obfuscate.s7
# Refreshing D:/FPGA learning/ModelSim/obfus(64bit)/encrypt_obfuscate.s8
# Loading encrypt_obfuscate.s8
# Refreshing D:/FPGA learning/ModelSim/obfus(64bit)/encrypt_obfuscate.contrl
# Loading encrypt_obfuscate.contrl
run -all
# ++++++++++++++++++ Test encode+encrypt  ++++++++++++++++++++
# input: 14399, binary:0011100000111111, output: 1000011100110010000111101001011111011101010010000101111100100100
# 
# ++++++++++++++++++ Test avalanche effect  (fibonacci) ++++++++++++++++++++
# input: 0011100000111110, output: 0101101110111000111111010100010001011001000101101010101101011010
# 
# xor:1101110010001010111000111101001110000100010111101111010001111110, cnt: 36
# 
# input: 0011100000111101, output: 0110010110011111000101001111111101001001010000000000001110000110
# 
# xor:1110001010101101000010100110100010010100000010000101110010100010, cnt: 25
# 
# input: 0011100000111011, output: 1011001000010001010001101110010010001010000000100110100011001110
# 
# xor:0011010100100011010110000111001101010111010010100011011111101010, cnt: 33
# 
# input: 0011100000110111, output: 0100111011100011111111100100110111010110111010100000000000011001
# 
# xor:1100100111010001111000001101101000001011101000100101111100111101, cnt: 33
# 
# input: 0011100000101111, output: 1101011100000001000011110110111011111000110000001111010001000111
# 
# xor:0101000000110011000100011111100100100101100010001010101101100011, cnt: 28
# 
# input: 0011100000011111, output: 1000101111101011100111110101001100011111100100101111111010111111
# 
# xor:0000110011011001100000011100010011000010110110101010000110011011, cnt: 28
# 
# input: 0011100001111111, output: 1010111101101100110110101111101011101010111010110001110011110100
# 
# xor:0010100001011110110001000110110100110111101000110100001111010000, cnt: 30
# 
# input: 0011100010111111, output: 1011000110000010010100010010010011011100011001000000000110111111
# 
# xor:0011011010110000010011111011001100000001001011000101111010011011, cnt: 31
# 
# input: 0011100100111111, output: 0101101110011111010000011011100011101011011000111001011000011011
# 
# xor:1101110010101101010111110010111100110110001010111100100100111111, cnt: 39
# 
# input: 0011101000111111, output: 1011110101000000010010001111001111010001110101100100000011000110
# 
# xor:0011101001110010010101100110010000001100100111100001111111100010, cnt: 31
# 
# input: 0011110000111111, output: 0001000001000001111101010001101011101100011000010000001000111101
# 
# xor:1001011101110011111010111000110100110001001010010101110100011001, cnt: 34
# 
# input: 0011000000111111, output: 1000001101111001010010001010000111001000010111011111111101101010
# 
# xor:0000010001001011010101100011011000010101000101011010000001001110, cnt: 25
# 
# input: 0010100000111111, output: 1010110100010001010111001000011011000100100010001010010111000101
# 
# xor:0010101000100011010000100001000100011001110000001111101011100001, cnt: 35
# 
# input: 0001100000111111, output: 1110101101010010110111110100110101010111010100011100011111100011
# 
# xor:0110110001100000110000011101101010001010000110011001100011000111, cnt: 28
# 
# input: 0111100000111111, output: 1100011101110111001100000010111011001111101001110101100101110001
# 
# xor:0100000001000101001011101011100100010010111011110000011001010101, cnt: 28
# 
# input: 1011100000111111, output: 0101111011000001110001101100110110000101001001110100110010110010
# 
# xor:1101100111110011110110000101101001011000011011110001001110010110, cnt: 35
# 
# ** Note: $stop    : D:/FPGA learning/ModelSim/obfus(64bit)/top_encode_encrypt_vlg_tst.v(82)
#    Time: 6062270 ns  Iteration: 0  Instance: /top_encode_encrypt_vlg_tst
run -all
# ++++++++++++++++++ Test encode+encrypt  ++++++++++++++++++++
# input:  9306, binary:0010010001011010, output: 1000010100110000101000001010000101000000110001110000101010010110
# 
# ++++++++++++++++++ Test avalanche effect  (fibonacci) ++++++++++++++++++++
# input: 0010010001011011, output: 0101000110010000110000010111011000101100101001111100100100001011
# 
# xor:1101010010100000011000011101011101101100011000001100001110011101, cnt: 30
# 
# input: 0010010001011000, output: 1011101001011100111110101110010100100100100101010011111001011111
# 
# xor:0011111101101100010110100100010001100100010100100011010011001001, cnt: 29
# 
# input: 0010010001011110, output: 0111000010010111000001110011010000011011111100101010000011101000
# 
# xor:1111010110100111101001111001010101011011001101011010101001111110, cnt: 32
# 
# input: 0010010001010010, output: 0000001110001100010011000100001101001111111001000110010010100111
# 
# xor:1000011010111100111011001110001000001111001000110110111000110001, cnt: 32
# 
# input: 0010010001001010, output: 0011000001000001001111110000110111111000110010100101100111001101
# 
# xor:1011010101110001100111111010110010111000000011010101001101011011, cnt: 35
# 
# input: 0010010001111010, output: 0110111001010101001101000011110000001100010100110100000010000010
# 
# xor:1110101101100101100101001001110101001100100101000100101000010100, cnt: 29
# 
# input: 0010010000011010, output: 1010110111011100000000000001000010100101111100111010001000100100
# 
# xor:0010100011101100101000001011000111100101001101001010100010110010, cnt: 28
# 
# input: 0010010011011010, output: 0101011101000111101011110110001011110001000101010111111100011111
# 
# xor:1101001001110111000011111100001110110001110100100111010110001001, cnt: 34
# 
# input: 0010010101011010, output: 1010100011010001010000000000111011010101111011101001110000001101
# 
# xor:0010110111100001111000001010111110010101001010011001011010011011, cnt: 33
# 
# input: 0010011001011010, output: 1111110010010010000101110001001101111010001111101101001010111011
# 
# xor:0111100110100010101101111011001000111010111110011101100000101101, cnt: 36
# 
# input: 0010000001011010, output: 1010000110111011100000110010000101111001000100110001101010100010
# 
# xor:0010010010001011001000111000000000111001110101000001000000110100, cnt: 22
# 
# input: 0010110001011010, output: 0110100110011000101010101001011001101101101110110101111000110110
# 
# xor:1110110010101000000010100011011100101101011111000101010010100000, cnt: 22
# 
# input: 0011010001011010, output: 0010010010001100000110000011100000010111011000010101000111110000
# 
# xor:1010000110111100101110001001100101010111101001100101101101100110, cnt: 34
# 
# input: 0000010001011010, output: 0100001010111011001100000000011101010101101100001110010111110110
# 
# xor:1100011110001011100100001010011000010101011101111110111101100000, cnt: 33
# 
# input: 0110010001011010, output: 1101000000010000101000011011111111110110000110111110100111101101
# 
# xor:0101010100100000000000010001111010110110110111001110001101111011, cnt: 31
# 
# input: 1010010001011010, output: 1000001100000000110010110000010111101000111101111011010011101101
# 
# xor:0000011000110000011010111010010010101000001100001011111001111011, cnt: 29
# 
# ** Note: $stop    : D:/FPGA learning/ModelSim/obfus(64bit)/top_encode_encrypt_vlg_tst.v(82)
#    Time: 9114470 ns  Iteration: 0  Instance: /top_encode_encrypt_vlg_tst