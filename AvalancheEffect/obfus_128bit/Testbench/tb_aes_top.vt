include "timescale.v";

module tb_aes_top;
reg	    [127:0] text_in;
reg     [127:0] key;
wire	[127:0]	text_out;
wire	done;
reg clk;   
reg kld;
reg rst;      //0:reset
reg sel;     //1:encode
reg ld;

reg [127:0] base_input;
reg [127:0] base_output;
reg [127:0] temp;
reg [7:0] cnt;

integer i;
integer k;
integer fid;

initial
 begin
	fid = $fopen("D:/FPGA learning/ModelSim/obfus(128bit)/AES/AES_avalanche.log");
 	$display("\n\n");
	$display("*****************************************************");
	$display("* AES Test bench ...");
	$display("*****************************************************");
	$display("\n");	
	kld = 0;
	clk = 0;
	rst = 0;
	repeat(4)	@(posedge clk);	
	rst = 1;
	sel = 1;
	repeat(20)	@(posedge clk);

	
	
   @(posedge clk);
   #1;
   kld = 1;
   ld  = 1;
   key    =128'h0123456789abcdef0123456789abcdef;
   text_in=128'h384f34481ec3cc627bacd5dc3fb08f27;
	@(posedge clk);
   #1; 
   kld = 0;
   ld=0;
    @(posedge clk);
   while(!done)	@(posedge clk);
   
	$fdisplay(fid, "input: %b, output: %b\n", text_in, text_out);
	$fdisplay(fid, "Test Done. ");	
	repeat(10)	@(posedge clk);

	$display(fid, "++++++++++++++++++ Test avalanche effect  (fibonacci) ++++++++++++++++++++");	
	
	
	base_output = text_out;
	for(i=0; i<128; i=i+1)
	begin
		base_input = 128'h384f34481ec3cc627bacd5dc3fb08f27;
		base_input[i] = ~base_input[i];
		kld = 0;
		clk = 0;
		rst = 0;
		repeat(4)	@(posedge clk);	
		rst = 1;
		sel = 1;
		repeat(20)	@(posedge clk);

		@(posedge clk);
   		#1;
   		kld = 1;
   		ld  = 1;
		key    =  128'h0123456789abcdef0123456789abcdef;	
		text_in = base_input;	
		@(posedge clk);
   		#1; 
   		kld = 0;
   		ld=0;
    	@(posedge clk);
   		while(!done)	@(posedge clk);   
		$fdisplay(fid,"input: %b, output: %b", text_in, text_out);

		temp = text_out^base_output;
		cnt = 8'b0;
		for(k=0; k<128; k=k+1)
		begin
			if(temp[k]!=0) cnt=cnt+1;
		end
		$fdisplay(fid,"xor:%b, cnt:%d\n", temp, cnt);	
		
	end
	$fclose();
	$stop;
 end
 
 always #5 clk = ~clk;
	
aes_top u1(
.clk	(   clk     ), 
.rst	(   rst     ), 
.kld	(   kld     ), 
.sel	(   sel     ),
.ld 	(   ld      ), 
.done   (   done    ), 
.key	(   key     ), 
.text_in(   text_in ), 
.text_out(  text_out) 
);
endmodule
